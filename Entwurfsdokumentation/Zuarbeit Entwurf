\documentclass[a4paper,10pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{tocbibind}
\usepackage{xcolor}
\usepackage{tikz}
\usepackage{hyperref}
\usepackage[ngerman]{babel}

%opening
\title{Zuarbeit Entwurf}
\author{}

\begin{document}

\maketitle


\begin{abstract}
Hiermit wird eine Zuarbeit zur Dokumentation für den Grob- und Feinentwurf gegeben.
\end{abstract}
\newpage
\tableofcontents
\newpage

\section{Grobentwurf}
Der Grobentwurf wurde so gestaltet, dass er nach der 3-Schichtenarchitektur aufgebaut ist. Genauer gesagt wurde das Model-View-Controller Muster verwendet. 
Diese ähnelt der 3-Schichtenarchitektur. Wir haben uns für diese Architektur entschieden, da man sehr leicht die einzelnen Schichten austauschen kann und damit seh schnell auf neue Anforderungen reagieren kann.
\subsection{Einzelne Elemente des MVC}
  \subsubsection{Model}
    Das Model erhält die Daten vom Controller. Sobald von dem Controller eine Änderung bekannt gegeben wird, reagiert das Model auf diese Änderungen.
    Es enthält die Logik und kann damit einfach ausgetauscht werden, falls dies erfoderlich wäre, ohne das dafür große Änderungen am Programm erfolgen müssen.
   \subsubsection{View}
   Die View ist für die Darstellung die die Interaktion mit dem Nutzer zuständig, solbald der Nutzer zum Beispiel auf der Oberfläche einen Klick ausführt, wird dies sofort an den Controller.
   \subsubsection{Controller}
   Der Controller ist ein zentrales Element, dass die Daten der View entgegenimmt und dann ein Event auslöst, dass an das Model weitergeleitet wird. 

   \newpage
\section{Feinentwurf}
Der Feinentwurf wurde zur besseren Übersicht in mehrere Klassendiagramme unterteilt. Für jede Rolle, die im Programm möglich ist, befindet sich ein Klassendiagramm.
Davon getrennt liegt das Repository, also das Herz unseres Programmes. Da wir uns aus Gründen der Wartbarkeit für das MVC-Konzept entschieden haben,hat jeder Controller eine View.
Diese kommunizieren außerdem noch mit dem Model im Repository. Dieses besitzt als alleinige Komponente den Zugang zur Datenbank. Damit ist auch hier ohne großer Aufwand ein Austausch mit lokalen Daten möglich.
Durch diese Gestaltung der Komponenten haben wir außerdem eine bessere Wiederverwendbarkeit von Komponenten geschaffen. 
\end{document}
